/**
 * BuiltInPredicateIOIO
 *
 * This class is a base class for built-in predicates with the form:
 *
 *      do_something(InList, OutList, InErrors, OutErrors)
 *
 * The IOIO in the name stands for In, Out, In, Out.
 *
 * The first argument is a word list; the second is an output
 * for the transformed word list. The third is an input list of
 * previously generated errors. The fourth argument outputs the
 * error list with any additional errors generated which may
 * have been generated.
 *
 * A subclass must implement the method evaluate().
 *
 * During execution, the solution node (BIPSolutionNodeIOIO) calls
 * evaluate(), which does some work on the InList. Finally the
 * solution node unifies the transformed list with the OutList.
 *
 * @author  Klivo
 * @version 1.0
 */

package inferencilo;

import java.util.*;

public abstract class BuiltInPredicateIOIO extends BuiltInPredicate implements Unifiable, Goal {

   /**
    * constructor
    *
    * @param  predicate name
    * @param  unifiable arguments
    */
   public BuiltInPredicateIOIO(String predicateName, Unifiable... arguments) {
      super(predicateName, arguments);
   }

   /**
    * getSolver
    *
    * Returns a solution node for this predicate.
    *
    * @param  knowledge base
    * @param  parent solution set
    * @param  parent solution node
    * @return solution node
    */
   public SolutionNode getSolver(KnowledgeBase knowledge,
                                 SubstitutionSet parentSolution,
                                 SolutionNode parentNode) {
      return new BIPSolutionNodeIOIO(this, knowledge, parentSolution, parentNode);
   }


   /**
    * standardizeVariablesApart()
    *
    * Refer to class Expression for full comments.
    *
    * Each subclass must return its own class. This is a base class,
    * so this method is abstract.
    */
   public abstract Expression
          standardizeVariablesApart(Hashtable<Variable, Variable> newVars);


   /**
    * evaluate
    *
    * The unique work of the built-in predicate is done in this method.
    *
    * @param   substitution set of parent
    * @return  unifiable term or null
    */
   public Unifiable evaluate(SubstitutionSet ss) { return null; }


   /**
    * getErrors
    *
    * Return errors generated by evaluate().
    *
    * @return  new list of errors
    */
   public abstract Unifiable getErrors();


}
