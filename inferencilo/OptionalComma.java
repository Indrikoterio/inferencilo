/**
 * OptionalComma
 *
 * This class is used for building lists.
 *
 * In some positions of a list, a comma is optional. For example:
 *     word1, word2 conjunction word3
 *     word1, word2, conjunction word3
 *
 * This class is used to collect a comma. If there is no comma,
 * this predicate returns an anonymous variable.
 *
 * @author  Klivo
 * @version 1.0
 */

package inferencilo;

import java.util.*;

public class OptionalComma extends ConjunctionListBase implements Unifiable, Goal {

   Unifiable newHead;   // of list
   Unifiable newTail;   // of list

   /**
    * constructor
    *
    * @param  unifiable arguments
    */
   public OptionalComma(String[] itemTypes, Unifiable... arguments) {
      super("optional_comma", itemTypes, arguments);
   }

   /**
    * getSolver
    *
    * Returns a solution node for this predicate.
    *
    * @param  knowledge base
    * @param  parent solution set
    * @param  parent solution node
    * @return solution node
    */
   public SolutionNode getSolver(KnowledgeBase knowledge,
                                 SubstitutionSet parentSolution,
                                 SolutionNode parentNode) {
      return new BIPSolutionNodeIHT(this, knowledge, parentSolution, parentNode);
   }


   /**
    * evaluate the parameters
    *
    * @param   substitution set of parent
    * @return  new unifiable
    */
   public Unifiable evaluate(SubstitutionSet ss) {

      if (arguments.length < 3) return null;

      PList list = castPList(arguments[0], ss);
      if (list == null) return null;

      Unifiable[] termoj = list.flatten(1);  // Get terms. (H, T)
      if (termoj == null) return null;

      Complex c1 = castComplex(termoj[0], ss);
      if (c1 == null) return null;
      if (checkComma(c1)) {
         newHead = c1;
         newTail = termoj[1];
      }
      else {
         newHead = Anon.anon;
         newTail = list;
      }

      return newHead;
   }


   /**
    * getHead
    * Get head term generated by evaluate().
    * @return head term
    */
   public Unifiable getHead() { return newHead; }

   /**
    * getTail
    * Get tail term generated by evaluate().
    * @return tail term
    */
   public Unifiable getTail() { return newTail; }

   /**
    * standardizeVariablesApart
    *
    * Refer to class Expression for full comments.
    */
   public Expression standardizeVariablesApart(Hashtable<Variable, Variable> newVars) {
      Unifiable[] newArguments = new Unifiable[arguments.length];
      for (int i = 0; i < arguments.length; i++) {
         newArguments[i] = standardizeOne(arguments[i], newVars);
      }
      return new OptionalComma(itemTypes, newArguments);
   }


} // OpetionalComma
