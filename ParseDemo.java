/**
 * ParseDemo
 *
 * This class parses English sentences. It was written as a demo for
 * the inference engine Inferencilo; it is not intended to be complete
 * or practical.
 *
 * In order to parse an English sentence, it is necessary to identify
 * the parts of speech, such as noun, pronoun, verb, etc.
 *
 * This demo first divides a sentence into words and punctuation.
 * For example, the sentence 'They envy us.' becomes a list of strings:
 *
 *      ["They", "envy", "us", "."]
 *
 * Next it creates a Prolog-like recursive list of Constants:
 *
 *      [They, envy, us, .]
 *
 * Note: In Prolog, a word beginning with a capital letter is a variable.
 * This inference engine is different. 'They' is a constant.
 *
 * The next step is to convert the above list into terms which identify
 * parts of speech. For example:
 *
 * [pronoun(They, subject), verb(envy, present, base), pronoun(us, object), period(.)]
 *
 * Many words can have more than one part of speech. The word 'envy', for
 * example, can be a noun or a verb. In order to convert a list of word
 * terms into a list of POS terms, the program needs facts which identify
 * possible parts of speech, such as:
 *
 *     word(envy, noun(envy, singular)).
 *     word(envy, verb(envy, present, base)).
 *
 * These above facts are generated by calling the function makeFacts()
 * of the class PartOfSpeech. These facts are then added to the knowledge
 * base.
 *
 * @author Cleve (Klivo) Lendon
 * @version 1.0
 */

import inferencilo.*;

import java.util.*;

class ParseDemo {

   private static String testString =
      "The ideal characteristic of artificial intelligence is its ability to rationalize.";

   /*
    * constructor
    *
    * Read in a file of Part of Speech data. Create a hashmap.
    */
   private ParseDemo() {
   }  // constructor


   /*
    * oneSolution
    *
    * Searches for a solution to the given goal and list.
    *
    * @param  ruleFunctor
    * @param  inList
    * @param  knowledgeBase
    * @return outList
    */
   private static PList oneSolution(Constant ruleFunctor, PList inList, KnowledgeBase kb)
                          throws TimeOverrunException {

      Variable X = VarCache.get("$X");  // placeholder
      Complex goal = new Complex(ruleFunctor, inList, X);
      SolutionNode node = goal.getSolver(kb, new SubstitutionSet(), null);
      SubstitutionSet solution = node.nextSolution();
      if (solution != null) {
         Complex result = (Complex)goal.replaceVariables(solution);
         return (PList)result.getTerm(2);  // Get the out list.
      }
      else {
         System.out.println("Fatal error. " + ruleFunctor);
      }
      return null;
   } // oneSolution


   public static void main(String[] args) {

      // Clean up the string to analyze.
      // New line becomes a space.
      testString = testString.replace('\n', ' ');

      // Divide string into words and punctuation.
      List<String> words = Sentence.getWords(testString);

      // Display these words.
      for (String word : words) { System.out.println(word); }

      // Put all the words into a Prolog-style recursive list.
      List<Unifiable> terms = new ArrayList<Unifiable>();
      for (String word : words) { terms.add(new Constant(word)); }
      PList wordList = new PList(false, terms);

      // Load part of speech data.
      PartOfSpeech pos = PartOfSpeech.getPartOfSpeech();

      // Make word facts, such as word(envy, noun(envy, singular)).
      List<Rule> facts = pos.makeFacts(words);

      // Set up the knowledge base, and fill it with facts.
      KnowledgeBase kb = new KnowledgeBase();
      ListIterator<Rule> factIterator = facts.listIterator();
      while (factIterator.hasNext()) {
         Rule fact = factIterator.next();
         kb.addRule(fact);
      }

      // -------------------------------

      /*
        words_to_pos/2 is a rule to convert a list of words into
        a list of parts of speech. For example, the constant term 'the'
        is converted to the complex term article(the, definite).
        The Prolog format of this rule would be:

        words_to_pos([H1 | T1], [H2 | T2]) :- word(H1, H2), words_to_pos(T1, T2).
        words_to_pos([], []).
       */

      /*
        Important - The following does not work:

        new Rule(
           new Complex(words_to_pos, new PList(true, $H1, $T1),
                                     new PList(true, $H2, $T2)),...

        The reason is...
        when you create a list with 'new PList(true, $H, $T)', you create
        a list with two terms (not n-terms). In order to join a term with
        a list, it is necessary to use JoinHeadTail: new JoinHeadTail($H, $T)
       */

      Constant word = new Constant("word");
      Constant words_to_pos = new Constant("words_to_pos");

      // Define Prolog variables.
      Variable H1  = VarCache.get("$H1");
      Variable H2  = VarCache.get("$H2");
      Variable T1  = VarCache.get("$T1");
      Variable T2  = VarCache.get("$T2");
      Variable Out = VarCache.get("$Out");

      Rule rule;
      rule = new Rule(new Complex(words_to_pos, new PList(true, H1, T1), Out),
                         new And(
                            new Complex(word, H1, H2),
                            new Complex(words_to_pos, T1, T2),
                            new Unify(Out, new JoinHeadTail(H2, T2))
                         )
                      );
      kb.addRule(rule);

      rule = new Rule(new Complex(words_to_pos, PList.empty, PList.empty));
      kb.addRule(rule);

      kb.showKB();

      try {

         // Convert the list of words to a list of parts of speech:
         PList posList = oneSolution(words_to_pos, wordList, kb);
         if (posList == null) {
            System.out.println("Could not find a solution.");
         }

         // Print out the solution.
         System.out.println(posList);

      }
      catch (TimeOverrunException tox) {
         System.out.println("Time overrun exception.");
      }

   } // main

}  // ParseDemo

